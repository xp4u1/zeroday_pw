name: zeroday

services:
  traefik:
    image: traefik:v3.3
    privileged: true
    networks:
      - zeroday
    env_file:
      - "./.env"
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.email=support@zeroday.pw"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      # Change the line above to use the staging servers to test Let's Encrypt
      # See https://doc.traefik.io/traefik/https/acme/#lets-encrypt
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      - "certs:/certs"
    restart: always
    labels:
      # Request/check wildcard certificate during startup
      - "traefik.http.routers.wildcard_dummy.tls.certresolver=letsencrypt"
      - "traefik.http.routers.wildcard_dummy.tls.domains[0].main=challenge.zeroday.pw"
      - "traefik.http.routers.wildcard_dummy.tls.domains[0].sans=*.challenge.zeroday.pw"
      # Redirect "zeroday.pw" to "portal.zeroday.pw"
      - "traefik.http.routers.redirect_top.rule=Host(`zeroday.pw`)"
      - "traefik.http.routers.redirect_top.entrypoints=websecure"
      - "traefik.http.routers.redirect_top.tls.certresolver=letsencrypt"
      - "traefik.http.routers.redirect_top.middlewares=redirect_top"
      - "traefik.http.middlewares.redirect_top.redirectregex.regex=^https://zeroday.pw/(.*)"
      - "traefik.http.middlewares.redirect_top.redirectregex.replacement=https://portal.zeroday.pw/$${1}"
      - "traefik.http.middlewares.redirect_top.redirectregex.permanent=true"
      # Redirect "challenge.zeroday.pw" to "portal.zeroday.pw"
      - "traefik.http.routers.redirect_challenge.rule=Host(`zeroday.pw`)"
      - "traefik.http.routers.redirect_challenge.entrypoints=websecure"
      - "traefik.http.routers.redirect_challenge.tls.certresolver=letsencrypt"
      - "traefik.http.routers.redirect_challenge.middlewares=redirect_top"
      - "traefik.http.middlewares.redirect_challenge.redirectregex.regex=^https://challenge.zeroday.pw/(.*)"
      - "traefik.http.middlewares.redirect_challenge.redirectregex.replacement=https://portal.zeroday.pw/$${1}"
      - "traefik.http.middlewares.redirect_challenge.redirectregex.permanent=true"

  portal:
    image: zeroday_portal
    privileged: true
    networks:
      - zeroday
    environment:
      - DATABASE_URL=/app/data/prod.db
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      - "database:/app/data"
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portal.rule=Host(`portal.zeroday.pw`)"
      - "traefik.http.routers.portal.entrypoints=websecure"
      - "traefik.http.routers.portal.tls.certresolver=letsencrypt"
      - "traefik.http.services.portal.loadbalancer.server.port=3000"
    depends_on:
      - traefik

volumes:
  certs:
  database:

networks:
  zeroday:
    name: zeroday
    driver: bridge
